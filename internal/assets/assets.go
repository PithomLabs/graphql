// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem statically implements the virtual filesystem provided to vfsgen.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/meta.graphql": &vfsgen۰CompressedFileInfo{
			name:             "meta.graphql",
			modTime:          time.Time{},
			uncompressedSize: 6923,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\x1b\xb9\xf5\x7f\x9f\x4f\x71\xac\x97\x7f\x0c\xc8\x63\xec\xbf\x29\x5a\xb8\x58\xa0\x4a\x2c\x67\x67\xeb\xc8\x59\x5b\x4a\x51\x04\xa9\x86\x9a\x39\xa3\xe1\x9a\x22\x27\x24\xc7\x8a\xb0\xbb\xdf\xbd\x38\x24\xe7\x26\x59\x72\x82\xa2\x2f\x89\x35\xe4\xf9\x9d\xfb\x8d\xa3\xd1\x28\x9a\x97\x08\x69\x22\x6d\x0a\x26\x63\x82\x69\xb0\xbb\x0a\x41\x63\xa5\xd1\xa0\xb4\x06\xa4\x92\x17\x85\x66\x99\xe5\x4a\x32\x01\x86\xaf\x25\xe6\xb0\x2d\x95\x40\x90\xf5\x06\x35\xcf\xe0\x89\x89\x1a\x4d\x0c\x89\xb4\x90\x31\xd9\x91\x47\xfe\x04\x56\x68\xb7\x88\x12\x2e\x5e\xfd\xff\xbf\xff\xf4\xc3\x39\x30\x99\x03\xfd\x05\x17\xf0\x43\x1c\x91\x1c\x81\x7b\x22\x6d\x14\xb5\x72\xdd\x08\xc5\x8e\x4b\x16\x44\xc9\x55\xbd\x12\x78\x51\x69\xcc\xb8\xe1\x4a\x42\x4f\xda\xc0\x9e\x19\x30\x15\x66\xbc\xe0\x98\xc3\x6a\x17\x7d\x4a\xa6\xd3\x29\xfc\xe5\xcf\xaf\x3f\xbf\x2a\xad\xad\xae\x2e\x2f\x51\xc6\x5b\xfe\xc8\x2b\xcc\x39\x8b\x95\x5e\x5f\xd2\xaf\x4b\xba\xb6\x2c\x48\x08\x2e\xd7\xcb\x4a\x71\x69\xcf\x07\xe2\x3a\x01\x7b\x02\x3f\x58\xcd\xe5\xfa\xa8\xc4\x16\xbf\xda\x9a\x09\xc8\x99\x65\xe3\xee\x00\x73\x92\x70\x31\xbf\xb9\xf8\x2b\x64\x25\x23\xf1\x51\x83\xc1\x2f\x35\xca\x0c\x4d\xec\xb0\x3d\xb4\x87\xe4\x06\x36\xca\x58\x50\x85\x45\x09\xb5\x71\x5a\xc1\x3b\xcd\xaa\xf2\x97\x5b\xb0\xaa\x83\x86\x42\x23\x5e\x14\x4a\x6f\xa0\xac\x37\x4c\x5e\x68\x64\x39\x5b\x09\x74\xb2\x0c\x74\xf1\x0c\x7a\xca\xbc\x51\x4a\x20\x93\x47\xb5\x49\xad\xae\x31\x05\xa5\x21\x2d\x98\x30\x98\x0e\xe0\x02\x75\x0f\x2f\xb9\x3e\x0a\xc5\xa0\x96\xfc\x4b\x8d\xc0\x73\x94\x96\xfc\xa4\xc7\x7d\xed\x9c\x4a\x05\xda\xac\x04\x26\x41\xad\x7e\xc5\xcc\x12\x63\x66\xe0\x11\x77\x50\xd0\x9f\x90\xb1\xac\x44\x6f\xac\xe4\xda\xb3\x60\x55\x85\x4c\x1b\xe0\x12\x18\xfc\xfc\x70\x37\x03\x8d\xa6\x52\xd2\x20\x91\xb2\xa0\xf3\xdf\xa0\x54\x5b\x7c\x22\x9e\xdc\x92\x71\xa5\xb2\xc0\xa5\x45\x99\x7b\xde\x2b\xdc\xb3\x5e\x1c\xfd\xb3\x44\x09\xf8\xb5\xc2\x2c\xb8\x8f\x49\xe0\xb2\xaa\xad\x63\x3c\x06\x26\x77\x60\xbc\xcb\x5e\x99\x9a\xe4\x36\x90\x8e\x5e\x8f\xd2\x73\x92\x9b\xc0\xd7\xa8\x7b\x47\xaf\xd3\xf3\x40\xef\x62\x16\xb6\x5c\x08\xe2\xcb\xb2\x0c\x2b\x8b\x79\xe4\x59\x24\xd7\xc3\x74\xb9\xf6\xf6\xbd\xe6\x1a\x33\x0a\xb0\x12\x01\xbf\x62\x56\x5b\xa5\x49\x70\x2e\x33\x51\xe7\x08\xb6\xe4\x06\x0a\x8e\x22\x27\xee\x85\x66\xeb\x0d\x05\x87\x92\x62\x07\x5b\xd2\x84\x08\x53\x5e\xa4\xc0\xf4\xba\x76\x67\xdc\x00\xf9\xd7\xb3\xcb\x1d\x3e\x7f\x42\xf8\x7b\x80\x7c\x15\x01\x00\x8c\x12\xff\x2b\x0f\x28\x44\x30\x72\x27\xbc\xb8\x6a\x42\xe0\x2c\x3a\x07\x25\xe1\x26\x99\xde\x5e\xc3\xef\x70\x73\x3f\x79\xf7\x7e\x3a\x9b\x2f\x1f\x3e\xdc\x4f\x27\xf4\x25\x99\xdd\x26\xb3\xe9\xb2\x39\x38\xad\x92\x79\xe4\xd5\x31\x7d\xbe\x53\x15\x82\x0a\x7a\x3c\x3c\xf2\xaa\xfa\x5f\xa8\xf1\x9e\xe9\x47\xe7\x39\x14\xe8\x6d\x5e\x00\x6b\x53\xd5\x64\x25\x6e\x18\x05\x80\x54\x20\x94\xa4\x98\x30\x75\x55\x29\x6d\x31\x3f\x90\x37\xa7\x84\xc9\x98\xc5\x3c\x48\x3d\xf2\x42\x4e\xbf\x56\x82\x71\x69\x60\x5b\xee\xbc\x69\x1a\x66\x5b\x66\xa0\xa3\x1a\x43\x6d\x6a\x26\xc4\x0e\x98\x30\x4d\x70\x50\x84\x32\x30\xf5\x7a\x8d\x86\xaa\xa6\x43\xa4\x84\x2a\xd5\x96\xec\x4d\x01\x68\x4c\x27\x15\x18\xbe\xe1\x14\x7b\x54\xc4\x62\xb8\x51\x7a\xc3\x2c\x7d\xe7\x9e\xf4\x13\x69\x9c\xab\xad\xf4\xb5\xd5\x5c\x5d\x5e\xe6\x8c\xf2\xa0\xe0\x1a\x57\x4c\x88\x58\xa2\xbd\xac\xb4\xa2\x1c\x36\x97\x9b\x70\xfb\xf2\x3c\x1e\xe8\xa4\x91\x19\x25\xaf\x9a\xb2\xf7\x23\x8c\x66\x87\x16\x1a\xf5\x5c\xb2\xbc\x9e\xde\x24\xb3\x64\x9e\xdc\xcd\xe0\x77\x98\xce\x16\xef\x97\x1f\x27\xb7\x8b\xa9\x77\xc3\x04\xae\x5b\x3b\x56\x5a\x3d\xf1\x9c\xda\x02\x6c\xd9\x8e\x74\xcc\xd1\x64\x9a\x53\xb6\x09\x8b\x5a\x32\x8b\xa0\x6b\x69\xf9\xa6\x09\x3d\x6a\x2b\xd4\xb3\x5c\x51\x79\x62\x82\xe7\xcc\x7d\x5b\x61\xc9\x9e\xb8\x4b\xe8\x9e\x57\x73\x95\xb9\xc0\x8b\xa3\x28\x91\x60\xd4\x06\x21\x63\x06\xcd\x18\x76\xaa\x06\x89\xbe\xa8\x04\x31\x40\x55\x04\x65\x9c\xad\x89\x7d\x03\xf3\x7f\xa6\xc7\xbc\x61\x14\x71\x49\x42\x37\xc1\xdf\x84\xb8\xf1\xf5\x82\xea\x96\xa9\x8b\x82\x67\x38\x86\xa6\xb4\x64\x4a\xe6\xdc\xf7\x43\xb1\xeb\x39\x5d\xe9\x88\x12\xa0\xf2\x01\xe0\xf0\xe2\xce\x4a\xa6\x95\xcf\x05\xd4\x6a\xd7\x18\xc9\x5d\xcf\x1b\x44\xe0\xb2\x70\x11\x40\x91\x63\xd5\x20\x5b\x7d\xfc\x3a\x93\x2d\x97\x9d\xf9\x7f\x73\xfe\x95\x6c\x83\x8d\x77\xcf\xdc\x17\x8f\xef\x8c\xd1\x1c\xb8\xef\x42\x65\x0e\xde\x5c\xc1\xa7\x1e\xce\x6d\xf8\x7c\xf6\xd9\x93\x33\xbd\xf6\x37\x12\xaa\xa2\x1f\xa9\x88\xd2\xd1\x1f\x87\xfe\xa7\x09\x85\x7c\x9d\xff\xca\x32\x4a\x12\xab\x60\x43\xe5\xba\x62\xda\x1a\xca\x4f\x52\xa2\xf1\xa5\x60\x72\x5d\xb3\x35\x55\xf4\xe8\x19\xee\x6d\xe8\x18\x50\x12\xbd\xcd\x2b\x65\x0c\xa7\x16\x1b\x38\x64\x9c\x7a\x38\x49\x81\xb2\xde\xc0\x73\x28\xde\x26\xa3\xf6\x77\x5f\x36\x06\x5f\x6a\xd4\x3b\x50\x15\x6a\x77\x1a\x4a\xd3\x2f\x8b\xe9\xfd\xbf\x4e\xd2\x6d\x6a\xeb\x3f\xef\x93\xbe\x5f\xcc\x27\x94\x28\x27\xa9\x4d\xbd\x6a\x1d\x72\x80\xf0\xb0\x78\xf3\xf0\xf6\x3e\xf9\xf0\x22\x8a\x8f\x2b\x4f\xe4\xf2\xf4\xf4\xed\xa6\x92\xe7\x58\x70\xc9\x7b\x0c\xdb\x72\xdb\xa5\xf9\xb7\x21\x99\x8a\x9a\xf6\x3e\x8a\x2f\xda\xa7\x10\xa8\x9d\x0b\x2e\xb1\x45\x0a\x10\xfb\x55\xfe\xa4\x09\x7d\x79\x3f\x50\xe6\xe1\xed\x4f\xd3\xf7\x93\x17\x48\x5d\x83\x7f\x86\x74\x72\x3b\xb9\x3f\x2d\x78\x98\x8f\x5c\xe6\x1d\x00\xdc\xbd\xf9\x79\xfa\xf6\xb4\xd8\xbe\xb6\x1c\xba\x60\xaf\xcc\x9e\x16\xa2\xed\xbe\x07\x38\x93\xfb\x77\x8b\xef\x70\xa5\x74\xd3\x92\x2e\x58\xf6\x8c\x36\xc9\x6c\x3e\xbd\xbf\x99\xbc\x9d\x9e\x54\xa8\x96\x3e\x55\xf7\x88\x17\xb3\x17\x59\xbb\x8c\x3d\x20\xa4\xee\xf2\x0d\x74\x7e\x92\x7b\x96\x3a\xf4\xa6\x17\xd4\xa6\x71\xf0\xa4\x33\x93\xd9\x87\xc5\x7c\xf9\xb2\x4b\xf7\xc0\x8e\x38\xd8\xa3\x1d\xb8\x39\x94\xd0\x3b\x89\x5d\x69\xf3\xaa\xf9\xb9\x7b\xcd\x9f\x50\xc2\x54\xd6\x9b\xd8\xfd\xdb\x6e\x5d\x1a\x9b\xb1\xde\x7f\x19\xbb\x06\xc5\xa2\x4a\xb0\x0c\x4b\x25\x72\xd4\x01\x22\x4c\xca\x4a\x0f\x57\xca\x18\x7e\xf2\x83\x39\x69\xd0\x41\xd3\x40\xa7\xd1\xd6\x5a\xfa\xb1\xe3\xd9\xd1\xde\x43\x0e\x7a\x10\x21\xb8\xc6\xf0\xdd\x3d\x88\x9b\xeb\x76\x8a\xea\x0d\x84\x9e\xc4\x1f\x70\x25\xef\x07\x33\x4b\x6b\x37\x6f\x73\x1a\x1f\x92\x36\x90\x49\x22\x6f\xa1\xa6\x81\xb8\x15\x8e\x81\xe0\x6e\xaf\x83\x1b\x72\x91\x19\x03\xb2\xac\xa4\xdf\xdb\x92\x67\x25\x94\xcc\x44\xcc\xc9\x3d\x86\x4a\x59\xda\x95\xfc\x3c\xd7\xd2\xb5\x13\xc1\xd8\x71\x64\xc1\x50\x8e\xe1\xc0\x18\x8e\xc1\x77\x1b\xe2\x48\x97\xa5\x23\xc2\xbd\x82\xe5\x72\xbe\xab\xf0\xec\xbf\xb6\xda\xa4\x9d\x6c\xc2\x1c\xe2\x66\x26\x6f\x15\x8a\x93\xde\xa0\xe2\x06\xb3\x12\x43\x88\x17\xe1\x4a\x01\x4c\x46\x4e\xca\xc6\x01\x1a\xf7\x57\x6e\x77\x0c\x1f\x7d\xb8\x7a\x0b\xb7\xa3\xa0\x2d\x91\x87\x45\x95\xc9\x3c\xf2\x53\x5a\x30\x76\x8e\x05\xab\x45\x58\xd5\x06\x56\xed\xcc\xf2\xdd\xa6\x3d\xb4\xdf\x68\xd2\x8c\x21\x17\x45\x3b\x66\x87\x54\x69\x35\x71\x8f\x02\x25\x0e\x65\x72\x69\xe5\x06\xb7\xde\x4e\x19\xb2\x3c\x5c\x74\x42\x1e\x58\xbd\x9d\x7b\x1e\x7a\xad\x0b\xfd\x16\x96\xb1\x8a\xad\xb8\xe0\x96\xa3\xd9\x5b\x63\x50\x3f\xa1\x8e\x21\xb1\xb4\x12\x2b\x43\x4e\x11\x22\x62\x4f\x8c\x0b\xff\xd8\xe0\xc3\x5d\xe6\x90\x77\x7e\x53\x7e\x57\xf3\xc4\x63\xf2\xc7\x16\x85\xa0\xff\xdd\x14\x29\xad\xde\x81\x7b\x73\x31\xa4\x4e\xe4\xa6\xa0\x71\x3b\xd4\xf8\xf8\x7e\x7e\x48\x31\x03\x9f\x04\x55\x7e\x6b\x6c\xda\xa6\x8a\x10\x41\xb0\x6e\xb9\x59\x85\x05\x2a\x68\x34\x6a\x3d\xe3\xa3\xde\xf9\x26\xc4\xfb\x68\x5e\x7a\xc5\xc0\x96\xcc\xee\x0f\x69\xa6\xdd\xe0\xb5\x52\x2e\xdc\x9a\x01\xc2\x5d\x9c\x1f\x3a\x3b\x29\xfa\xac\x1b\x99\x4c\x4f\x61\x3b\x60\x78\x38\xdd\x1d\xe7\xd9\xdc\xed\xb3\x3d\xc5\x75\x60\xd7\x7d\xc6\x47\x6c\x7e\x94\x79\xff\xfe\xa1\x00\x43\x7f\xf4\xc2\xe3\x05\xa7\x74\x37\x87\x7b\x41\x6f\xe8\x27\x07\x15\xb5\xcc\x19\x15\x12\x26\xa8\x19\x79\x46\x72\xb7\x1f\xe7\xdc\xb4\x4a\xc6\x30\x2f\x51\xa3\xab\x17\x6e\x2f\x78\xe4\xd2\x15\x94\xc8\x07\x0b\x97\x2d\x31\x33\x83\x8a\xe2\xe4\x44\x48\xbd\x7a\xff\xe0\x32\x4f\xdd\x20\x10\x47\xd1\x35\x56\x28\xfd\xda\xe5\xa3\x9e\x40\x7d\x12\xf9\xf7\xa2\x0c\xb5\x65\x5c\x36\xe5\xab\x2d\x43\xbd\xfd\x0a\xd8\x4a\xd5\xd6\xf9\x20\xf2\x82\x3e\x74\xaf\x69\xdd\xbe\x26\xd5\x80\x68\x85\x3b\xe5\x1a\x01\x55\x22\x9f\x82\xd8\x73\xed\xb6\xe4\x02\x23\xd7\x5b\x87\x30\xbe\xfe\x35\x2f\xbb\x27\x9a\x58\x8f\x20\x48\x1f\xd9\x12\xdb\x7d\x11\x63\x98\xac\x8c\xd5\x2c\x0c\x31\x66\x0c\x0b\xd9\xec\xd3\x2d\xd6\x78\x00\x73\xd7\xcd\x3c\x26\xea\xd6\x29\xdb\x6c\xe5\x31\xdc\x52\xcc\x10\xc2\x4c\xc9\x59\xdd\x26\x72\xa6\x36\x54\x7e\x40\xd9\x12\x83\x5d\x06\xa5\x80\xfc\x12\x0a\x01\x39\xa0\x89\x44\x72\xd5\xd9\x41\xb9\x3e\x59\xad\xbd\xa6\xaf\xc2\x6b\xd8\x33\x7d\x0e\x7e\x04\xf7\x2a\x7a\xee\xc2\xd3\x35\xae\xb3\xcf\xbe\x2d\x36\x4a\xf7\x6b\x8a\x3b\x69\x54\x9d\xef\x15\x1c\x77\x88\xcd\xf4\xf2\xed\x5c\xdb\x81\xa7\xe5\x5c\xd5\xd6\xf7\xd0\x83\x26\xee\x2e\xa8\x62\x90\xa0\x4d\x57\x68\xe7\xe0\xf6\x05\x60\x4b\x85\xa0\x89\x61\xdf\x24\xc3\x1c\x18\xa2\x3f\x05\x3e\x5c\x7a\x1b\x3b\x37\x75\x38\x91\x39\x27\xd9\x8d\xcf\xed\xe6\x5d\xbb\xd9\x7c\x9e\x59\x77\x8e\x51\x34\x0b\x4f\x0c\xa9\xf7\x4a\xea\x22\x23\xed\xec\x9c\xba\x64\x76\xef\x36\xc1\x71\xcf\x2c\x43\xc7\xe1\x5b\xa0\x7d\x0e\x03\x7f\x1d\x65\xb2\xb7\xa3\x1c\x55\xdc\x6d\x29\x31\xec\x81\xba\xa3\x1e\xea\xe1\xee\x72\x5c\x70\x57\x7c\x20\xed\x22\xe7\x28\x5c\xb7\xd1\x9c\x32\x43\xb7\x42\xc4\x64\xde\x36\x98\x8e\xc2\x1e\xee\x27\x47\xb5\xa7\x2e\x10\x43\xea\x23\xf0\x28\xe0\x6d\xf2\xf0\x12\x90\x54\xf2\x42\xd6\x42\xbc\x0c\x36\xbb\x9b\x2d\x67\x8b\xdb\xdb\xe8\x8f\xe8\x3f\x01\x00\x00\xff\xff\x26\x38\xae\xc2\x0b\x1b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/meta.graphql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
